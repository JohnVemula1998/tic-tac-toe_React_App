{"version":3,"sources":["Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","_useState","useState","_useState2","Object","slicedToArray","turn","setTurn","_useState3","Array","fill","_useState4","cells","setCells","_useState5","_useState6","winner","setWinner","handleClick","num","squares","toConsumableArray","combos","across","down","diagnol","combo","forEach","pattern","checkForWinner","alert","Cell","_ref","react_default","a","createElement","onClick","className","Fragment","App","src_Components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAyGeA,SAtGF,WAAM,IAAAC,EACMC,mBAAS,KADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACXK,EADWH,EAAA,GACLI,EADKJ,EAAA,GAAAK,EAEQN,mBAASO,MAAM,GAAGC,KAAK,KAF/BC,EAAAP,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEXI,EAFWD,EAAA,GAEJE,EAFIF,EAAA,GAAAG,EAGUZ,qBAHVa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAGXE,EAHWD,EAAA,GAGHE,EAHGF,EAAA,GAyCZG,EAAc,SAACC,GACpB,GAAmB,KAAfP,EAAMO,GAAV,CAKA,IAAIC,EAAOhB,OAAAiB,EAAA,EAAAjB,CAAOQ,GAEL,MAATN,GACHc,EAAQD,GAAO,IACfZ,EAAQ,OAERa,EAAQD,GAAO,IACfZ,EAAQ,MAjDa,SAACa,GACvB,IAAIE,EAAS,CACZC,OAAQ,CACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAERC,KAAM,CACL,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAERC,QAAS,CACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAIT,IAAK,IAAIC,KAASJ,EACjBA,EAAOI,GAAOC,QAAQ,SAACC,GAEG,KAAxBR,EAAQQ,EAAQ,KACQ,KAAxBR,EAAQQ,EAAQ,KACQ,KAAxBR,EAAQQ,EAAQ,KAIhBR,EAAQQ,EAAQ,MAAQR,EAAQQ,EAAQ,KACxCR,EAAQQ,EAAQ,MAAQR,EAAQQ,EAAQ,KAExCX,EAAUG,EAAQQ,EAAQ,OAsB7BC,CAAeT,GACfP,EAASO,QAfRU,MAAM,oBAuBFC,EAAO,SAAAC,GAAa,IAAVb,EAAUa,EAAVb,IACf,OAAOc,EAAAC,EAAAC,cAAA,MAAIC,QAAS,kBAAMlB,EAAYC,KAAOP,EAAMO,KAGpD,OACCc,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACdJ,EAAAC,EAAAC,cAAA,sBACQ7B,EACP2B,EAAAC,EAAAC,cAAA,aACCF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,IACXc,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,IACXc,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,KAEZc,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,IACXc,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,IACXc,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,KAEZc,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,IACXc,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,IACXc,EAAAC,EAAAC,cAACJ,EAAD,CAAMZ,IAAK,OAIbH,GACAiB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KACCL,EAAAC,EAAAC,cAAA,SAAInB,EAAJ,mBACAiB,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAjCpBnB,EAAU,WACVJ,EAASJ,MAAM,GAAGC,KAAK,OAgCpB,kBCtFU6B,MATf,WACC,OACCN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,8BACHF,EAAAC,EAAAC,cAACK,EAAD,QCKiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a51d22ab.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Game.css';\r\n\r\nconst Game = () => {\r\n\tconst [turn, setTurn] = useState('x');\r\n\tconst [cells, setCells] = useState(Array(9).fill(''));\r\n\tconst [winner, setWinner] = useState();\r\n\r\n\tconst checkForWinner = (squares) => {\r\n\t\tlet combos = {\r\n\t\t\tacross: [\r\n\t\t\t\t[0, 1, 2],\r\n\t\t\t\t[3, 4, 5],\r\n\t\t\t\t[6, 7, 8],\r\n\t\t\t],\r\n\t\t\tdown: [\r\n\t\t\t\t[0, 3, 6],\r\n\t\t\t\t[1, 4, 7],\r\n\t\t\t\t[2, 5, 8],\r\n\t\t\t],\r\n\t\t\tdiagnol: [\r\n\t\t\t\t[0, 4, 8],\r\n\t\t\t\t[2, 4, 6],\r\n\t\t\t],\r\n\t\t};\r\n\r\n\t\tfor (let combo in combos) {\r\n\t\t\tcombos[combo].forEach((pattern) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tsquares[pattern[0]] === '' ||\r\n\t\t\t\t\tsquares[pattern[1]] === '' ||\r\n\t\t\t\t\tsquares[pattern[2]] === ''\r\n\t\t\t\t) {\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tsquares[pattern[0]] === squares[pattern[1]] &&\r\n\t\t\t\t\tsquares[pattern[1]] === squares[pattern[2]]\r\n\t\t\t\t) {\r\n\t\t\t\t\tsetWinner(squares[pattern[0]]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleClick = (num) => {\r\n\t\tif (cells[num] !== '') {\r\n\t\t\talert('already clicked');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet squares = [...cells];\r\n\r\n\t\tif (turn === 'x') {\r\n\t\t\tsquares[num] = 'x';\r\n\t\t\tsetTurn('o');\r\n\t\t} else {\r\n\t\t\tsquares[num] = 'o';\r\n\t\t\tsetTurn('x');\r\n\t\t}\r\n\r\n\t\tcheckForWinner(squares);\r\n\t\tsetCells(squares);\r\n\t};\r\n\r\n\tconst handleRestart = () => {\r\n\t\tsetWinner(null);\r\n\t\tsetCells(Array(9).fill(''));\r\n\t};\r\n\r\n\tconst Cell = ({ num }) => {\r\n\t\treturn <td onClick={() => handleClick(num)}>{cells[num]}</td>;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<table>\r\n\t\t\t\tTurn: {turn}\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={0} />\r\n\t\t\t\t\t\t<Cell num={1} />\r\n\t\t\t\t\t\t<Cell num={2} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={3} />\r\n\t\t\t\t\t\t<Cell num={4} />\r\n\t\t\t\t\t\t<Cell num={5} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={6} />\r\n\t\t\t\t\t\t<Cell num={7} />\r\n\t\t\t\t\t\t<Cell num={8} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t{winner && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<p>{winner} is the winner!</p>\r\n\t\t\t\t\t<button onClick={() => handleRestart()}>Play Again</button>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './Components/Game'\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n      <h2>Tic Tac Toe Game</h2>\n\t\t\t<Game/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}